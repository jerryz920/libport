#!/usr/bin/env python3

import sys
import ctypes

libc=ctypes.cdll.LoadLibrary("libc.so.6")

def abort(*args, **kargs):
    print("no such method, abort")
    sys.exit(2)

def create(fn, args):
    if len(args) == 6: 
        print(fn(int(args[0]), cstr(args[1]), cstr(args[2]), cstr(args[3]),
            int(args[4]), int(args[5])))
    else:
        print(fn(int(args[0]), cstr(args[1]), cstr(args[2]), cstr(""),
            int(args[3]), int(args[4])))


def delete(fn, args):
    print(fn(int(args[0])))

def post_acl(fn, args):
    print(fn(cstr(args[0]), cstr(args[1])))

def endorse_image(fn, args):
    print(fn(cstr(args[0]), cstr(args[1]), cstr(args[2])))

def endorse_member(fn, args):
    print(fn(cstr(args[0]), int(args[1]), int(args[2]), cstr(args[3])))

def endorse_attester(fn, args):
    print(fn(cstr(args[0]), cstr(args[1])))

def attest(fn, args):
    val = ctypes.c_int()
    ptr = ctypes.c_char_p()
    fn(cstr(args[0]), int(args[1]), ctypes.byref(ptr), ctypes.byref(val))
    print(ptr.value)
    libc.free(ptr)

def hasprop(fn, args):
    print(fn(cstr(args[0]), int(args[1]), cstr(args[2])))

def hasaccess(fn, args):
    print(fn(cstr(args[0]), int(args[1]), cstr(args[2])))

def worker_access(fn, args):
    print(fn(cstr(args[0]), int(args[1]), cstr(args[2])))




def cstrptr():
    return ctypes.POINTER(ctypes.POINTER(ctypes.c_char_p))

def cstr(s):
    return ctypes.c_char_p(s.encode("utf-8"))

dispatch_table = {
        "create": [create, "create_principal_with_allocated_ports"],
        "delete": [delete, "delete_principal_without_allocated_ports"],
        "attest": [attest, "check_attestation"],
        "endorse_member": [endorse_member, "endorse_membership"],
        "endorse_image": [endorse_image, "endorse_image"],
        "endorse_attester": [endorse_attester, "endorse_attester"],
        "check_access": [hasaccess, "check_access"],
        "check_property": [hasprop, "check_property"],
        "post_acl": [post_acl, "post_object_acl"],
        "worker_access": [worker_access, "check_worker_access"]
}


def dispatch(lib, args):
    print("args=", args)
    entry = dispatch_table.get(args[0])
    if not entry:
        abort()
    libmethod = "liblatte_" + entry[1]
    method = getattr(lib, libmethod, abort)
    entry[0](method, args[1:])


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("usage: latte myid default_ip")
        sys.exit(1)
    liblatte = ctypes.cdll.LoadLibrary("liblatte.so")
    liblatte.liblatte_set_log_level(7);
    liblatte.liblatte_init(cstr(sys.argv[1].strip()), 0,
        cstr(sys.argv[2].strip()))

    for line in sys.stdin.readlines():
        l = line.strip()
        if l == "" or l.startswith("#"):
            continue
        parts = l.split()
        dispatch(liblatte, parts)

