#!/bin/bash

IAAS="152.3.145.38:444"
ATTEST="152.3.145.138:4144"

IP1="192.1.0.18"
IP2="192.1.0.19"
CTNIP1="192.1.3.0"
CTNIP2="192.1.2.0"
VM1="$IP1:1-65535"
VM2="$IP2:1-65535"
CTN1="$CTNIP1:1-65535"
CTN2="$CTNIP2:1-65535"
SPARKM="$CTNIP1:30000-65534"
SPARKS="$CTNIP2:30000-65534"
VMIMG="826ff6e8-d7d2-4a55-8c59-6ae9017b49be"
CTNIMG="0f1469d4cf27"

#int liblatte_init(const char *myid, int run_as_iaas, const char *daemon_path);
#int liblatte_create_principal_new(uint64_t uuid, const char *image, const char *config,
#    int nport, const char *new_ip);
#int liblatte_create_principal(uint64_t uuid, const char *image, const char *config,
#    int nport);
#
#int liblatte_create_principal_with_allocated_ports(uint64_t uuid, const char *image,
#    const char *config, const char * ip, int port_lo, int port_hi);
#/// Legacy API
#int liblatte_post_object_acl(const char *obj_id, const char *requirement);
#int liblatte_delete_principal_without_allocated_ports(uint64_t uuid);
#
#int liblatte_endorse_image(const char *id, const char *config, const char *property) ;
#int liblatte_endorse_membership(const char *ip, uint32_t port, uint64_t gn, const char *master);
#int liblatte_endorse_attester(const char *id, const char *config);
#int liblatte_check_property(const char *ip, uint32_t port, const char *property);
#int liblatte_check_access(const char *ip, uint32_t port, const char *object);
#char* liblatte_check_attestation(const char *ip, uint32_t port, char **attestation,
#    size_t *size);

#endif

SOCK="/var/run/attguard.sock"

./latte $IAAS $SOCK <<EOF
create  1 $VMIMG * $IP1 1 65535
create  10 $VMIMG * $IP2 1 65535
endorse_attester  $VMIMG *
endorse_attester  $CTNIMG *
endorse_image  $VMIMG * git://docker
endorse_image  $CTNIMG * git://spark
#endorse_image  sparkimg * pio
#create 2 $CTNIMG * $CTNIP1 1 65535
#create 20 $CTNIMG * $CTNIP2 1 65535
EOF

./latte $VM1 $SOCK <<EOF
create 2 $CTNIMG * $CTNIP1 1 65535
EOF

./latte $VM2 $SOCK <<EOF
create 20 $CTNIMG * $CTNIP2 1 65535
EOF

./latte $CTN2 $SOCK <<EOF
create 30 sparkimg * $CTNIP2 30000 65534
EOF
#
./latte $CTN1 $SOCK <<EOF
create 3 sparkimg * $CTNIP1 30000 65534
EOF

./latte $CTN1 $SOCK <<EOF
endorse_member $CTNIP2 10005 0 clustersp
EOF
#
./latte alice $SOCK <<EOF
post_acl pio-obj1 pio
#post_acl object_pio git://pio
#post_acl object_docker git://docker
#post_acl object_spark git://spark
EOF
#
./latte $ATTEST $SOCK <<EOF
#attest $IP1 1
#attest $IP1 10000
#attest $IP1 10002
#check_property $IP1 1 git://pio
#check_property $IP1 1 git://spark
#check_property $IP1 1 git://docker
#check_access $IP1 1 alice:object_docker
#check_property $IP1 10000 git://pio
#check_property $IP1 10000 git://spark
#check_property $IP1 10000 git://docker
#check_property $IP1 10002 git://pio
#check_property $IP1 10002 git://spark
#check_property $IP1 10002 git://docker
#worker_access $IP2 10005 alice:object_pio
#worker_access $IP2 10007 alice:object_pio
#worker_access $IP2 10005 alice:object_spark
#worker_access $IP2 10007 alice:object_spark
#worker_access $IP2 10005 alice:object_docker
#worker_access $IP2 10007 alice:object_docker
#
#worker_access $IP2 10015 alice:object_pio
#worker_access $IP2 10017 alice:object_spark
#worker_access $IP2 10019 alice:object_docker
#check_image_property vmimg * git://docker
check_access $CTNIP2 50000 alice:pio-obj1
EOF
#
